[
  {
    "tool_name": "tavily_search_api",
    "module_path": "backend.tools.tavily_search_tool",
    "class_name": "TavilyAPISearchTool",
    "description_for_agent": "A search engine optimized for comprehensive, accurate, and trusted results using the Tavily API. Use for finding up-to-date information or discovering web pages when you don't have a specific URL. Input should be a search query string. Optionally, 'max_results' can be specified within a JSON input. Returns a list of search result objects, each containing 'title', 'url', and 'content' (snippet).",
    "input_schema_description": "A JSON string with a 'query' (string, required) and optional 'max_results' (integer). Example: '{\"query\": \"AI in medicine\", \"max_results\": 3}'",
    "output_description": "A list of search result dictionaries. Each dictionary contains 'url', 'title', and 'content'.",
    "initialization_params": {},
    "enabled": true,
    "category": "search"
  },
  {
    "tool_name": "web_page_reader",
    "module_path": "backend.tools.web_page_reader_tool",
    "class_name": "WebPageReaderTool",
    "description_for_agent": "Use this tool ONLY to fetch and extract the main text content from a specific, known URL. Input MUST be a single, valid URL string (e.g., 'https://example.com/page'). Max content length is approximately 4000 characters. Returns the main text content of the page or an error message. Do NOT use this for general web searching; use 'tavily_search_api' for that.",
    "input_schema_description": "A single string representing the URL of the web page to read. Example: 'https://www.example.com/article.html'",
    "output_description": "The extracted text content from the web page, or an error message if fetching/parsing fails.",
    "initialization_params": {},
    "enabled": true,
    "category": "web"
  },
  {
    "tool_name": "python_package_installer",
    "module_path": "backend.tools.python_package_installer_tool",
    "class_name": "PythonPackageInstallerTool",
    "description_for_agent": "Use this tool ONLY to install Python packages into the current environment. Input MUST be a string of one or more package specifiers, separated by spaces or commas (e.g., 'numpy pandas', 'matplotlib==3.5.0'). SECURITY WARNING: This installs packages into the main environment. Avoid installing untrusted packages. Returns a summary of the installation process.",
    "input_schema_description": "A string containing one or more Python package specifiers, space or comma-separated. Example: 'requests beautifulsoup4' or 'pandas==1.3.0,numpy>=1.20'.",
    "output_description": "A summary string indicating the success or failure of each package installation attempt.",
    "initialization_params": {},
    "enabled": true,
    "category": "system"
  },
  {
    "tool_name": "pubmed_search",
    "module_path": "backend.tools.pubmed_search_tool",
    "class_name": "PubMedSearchTool",
    "description_for_agent": "Use this tool ONLY to search for biomedical literature abstracts on PubMed. Input MUST be a search query string (e.g., 'CRISPR gene editing cancer therapy'). Optionally append ' max_results=N' to the query to specify number of results (default 5, max 20). Returns formatted summaries including title, authors, link (DOI or PMID), and abstract snippet.",
    "input_schema_description": "A search query string for PubMed. Example: 'lung cancer immunotherapy max_results=3'.",
    "output_description": "A string containing formatted summaries of PubMed articles, or a message if no results are found.",
    "initialization_params": {},
    "enabled": true,
    "category": "search"
  },
  {
    "tool_name": "Python_REPL",
    "module_path": "backend.tools.python_repl_tool",
    "class_name": "PythonREPLTool",
    "description_for_agent": "Executes a single, simple Python expression or a very short, self-contained snippet of Python code. Use for straightforward operations like basic arithmetic, simple string manipulations, or quick checks. DO NOT use for defining multi-line functions/classes, complex scripts, file I/O, or installing packages. For scripts, use 'write_file' then 'workspace_shell'. Output is the result or print statements. SECURITY NOTE: Executes code directly.",
    "input_schema_description": "A single string containing the Python code/expression to execute. Example: '2 + 2' or 'print(\"hello\")'.",
    "output_description": "The result of the Python expression or the content of print() statements. Errors will be returned as strings.",
    "initialization_params": {},
    "enabled": true,
    "category": "code_execution"
  }
]
